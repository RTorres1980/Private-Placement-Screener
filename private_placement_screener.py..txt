"""
Private Placement Screener
Author: Robert Torres
Description:
A comprehensive private placement screener that fetches deal data, analyzes metrics, scores opportunities,
and visualizes insights. Integrates with Bloomberg API (if available) or can use mock data for testing.
"""

import pandas as pd
import numpy as np
import datetime
import matplotlib.pyplot as plt
import plotly.express as px

try:
    import blpapi
    BLOOMBERG_AVAILABLE = True
except ImportError:
    print("blpapi not found. Using mock data for demonstration.")
    BLOOMBERG_AVAILABLE = False

# ==========================
# CONFIGURATION
# ==========================
FIELDS = ["PX_LAST", "CUR_MKT_CAP", "PX_VOLUME", "COMPANY_NAME", "YIELD"]
SECURITIES = ["AAPL US Equity", "MSFT US Equity"]  # Replace with private placement tickers
OUTPUT_CSV = "private_placement_screener_results.csv"

# ==========================
# DATA FETCHING
# ==========================
def fetch_bloomberg_data(securities, fields):
    """Fetch data from Bloomberg API."""
    session_options = blpapi.SessionOptions()
    session_options.setServerHost("localhost")
    session_options.setServerPort(8194)

    session = blpapi.Session(session_options)
    if not session.start():
        raise Exception("Failed to start Bloomberg session")
    if not session.openService("//blp/refdata"):
        raise Exception("Failed to open Bloomberg service")

    ref_data_service = session.getService("//blp/refdata")
    request = ref_data_service.createRequest("ReferenceDataRequest")
    for security in securities:
        request.getElement("securities").appendValue(security)
    for field in fields:
        request.getElement("fields").appendValue(field)
    
    session.sendRequest(request)
    data = []
    while True:
        ev = session.nextEvent(500)
        for msg in ev:
            if msg.hasElement("securityData"):
                data.append(msg.getElement("securityData"))
        if ev.eventType() == blpapi.Event.RESPONSE:
            break
    session.stop()
    return data

def get_mock_data():
    """Generate mock private placement data for testing."""
    np.random.seed(42)
    companies = [f"Company {i}" for i in range(1, 11)]
    data = {
        "COMPANY_NAME": companies,
        "PX_LAST": np.random.uniform(50, 150, 10),
        "CUR_MKT_CAP": np.random.uniform(100, 1000, 10),
        "PX_VOLUME": np.random.randint(1000, 5000, 10),
        "YIELD": np.random.uniform(3, 12, 10)
    }
    df = pd.DataFrame(data)
    return df

# ==========================
# DATA PROCESSING
# ==========================
def score_deals(df):
    """Score deals based on yield, market cap, and volume."""
    df["Score"] = (
        df["YIELD"] / df["YIELD"].max() * 0.4 +
        df["CUR_MKT_CAP"] / df["CUR_MKT_CAP"].max() * 0.3 +
        df["PX_VOLUME"] / df["PX_VOLUME"].max() * 0.3
    )
    df.sort_values("Score", ascending=False, inplace=True)
    return df

# ==========================
# VISUALIZATION
# ==========================
def visualize_deals(df):
    """Interactive scatter plot of deals by market cap and yield."""
    fig = px.scatter(
        df,
        x="CUR_MKT_CAP",
        y="YIELD",
        size="PX_VOLUME",
        color="Score",
        hover_name="COMPANY_NAME",
        title="Private Placement Opportunity Analysis",
        labels={"CUR_MKT_CAP": "Market Cap (M USD)", "YIELD": "Yield (%)"}
    )
    fig.show()

# ==========================
# MAIN
# ==========================
def main():
    if BLOOMBERG_AVAILABLE:
        print("Fetching Bloomberg data...")
        raw_data = fetch_bloomberg_data(SECURITIES, FIELDS)
        # Parsing raw Bloomberg data into a DataFrame would go here
        df = get_mock_data()  # For demonstration
    else:
        print("Using mock data for demonstration...")
        df = get_mock_data()
    
    print("Scoring private placement deals...")
    df = score_deals(df)
    
    print("Top deals by score:")
    print(df[["COMPANY_NAME", "YIELD", "CUR_MKT_CAP", "PX_VOLUME", "Score"]])
    
    print("Generating visualizations...")
    visualize_deals(df)
    
    print(f"Exporting results to {OUTPUT_CSV}...")
    df.to_csv(OUTPUT_CSV, index=False)
    print("Done!")

if __name__ == "__main__":
    main()
